syntax = "proto2";

import "google/protobuf/descriptor.proto";

option java_package = "fi.polar.remote.representation.protobuf";

/*
  Definitions for common value types used in messages.
  This does not include any composite types.

  For intended usage of this data, see "File System Structure in Genesis ecosystem devices"
  (https://swa.polar.fi/sag/wiki/SAGRFC/SAGRFC2)
  
  The "products" column is used for optimizing the collector software 
  by removing unused "optional" fields from the generated code.
*/

enum PbDataType {

	UNDEFINED = 0;     // Not defined
	INHERITED = 1;     // Inherited from parent field (for generics) 
	ENUM      = 2;     // Reserved for enumerations
	
	MILLIS    = 3;     // Milliseconds
	SECOND    = 4;     // Seconds
	MINUTE    = 5;     // Minutes
	HOUR      = 6;     // Hours
	HOURS     = 7;     // Hours
	
	DAY       = 8;     // Day of month
	MONTH     = 9;     // Month
	YEAR      = 10;    // Year
	
	WEIGHT    = 11;    // Kilograms
	HEIGHT    = 12;    // Centimeters
	VO2MAX    = 13;    // ml/kg/min

	HEARTRATE   = 20;    // bpm
	HR_PERCENT  = 21;    // hr%
	HR_RESERVE  = 22;    // hrr
	SPEED       = 23;    // km/h
	CADENCE     = 24;    // Rotations per minute (rpm)
	ALTITUDE    = 25;    // Meters
	POWER       = 26;    // Watts
	POWER_LRB   = 27;    // Percentage of left foot
	POWER_PI    = 28;    // 0-100 ("Percentage")
	TEMPERATURE = 29;    // Celsius
	ACTIVITY    = 30;    // Metabolic Equivalent of Task (MET)
    
	STRIDE_LENGTH = 31;  // Stride length while running (cm)
	INCLINE       = 32;  // Climbing angle (%)
	DECLINE       = 33;  // Descending angle (%)

	DISTANCE      = 52;	 // Meters
	ENERGY        = 53;  // Energy consumption (kcal), float.
	FAT_PERCENTS  = 54;  // Percentage
	ASCENT        = 55;	 // Continuous ascent
	DESCENT       = 56;  // Continuous descent
	LATITUDE      = 57;  // Latitude
	LONGITUDE     = 58;  // Longitude
	HERTZ         = 59;  // Hertz
	PERCENT       = 60;  // 0-100 Percentage

	CUMULATED_ACTIVITY_DAY  = 61;    // Amount of activity cumulated during single day (METmin)
    RUNNING_INDEX           = 62;    // Running index result
    RR_INTERVAL             = 63;    // ms
    Z_INDEX                 = 64;    // Orthostatic test: Z-index
    EXERCISE_TARGET_INDEX   = 65;    // Exercise target index
    TIME_ZONE_OFFSET        = 66;    // Time zone offset in minutes
    WHEEL_SIZE              = 67;    // Bike wheel size
    FITNESS_CLASS           = 68;    // Fitness class [1 - 7] based on VO2max, age and gender
    ACCELERATION            = 69;    // User 1d acceleration (m/s2)
    CRANK_LENGTH            = 70;    // Length of the crank in bike
    ANGLE_DEGREE            = 71;    // General positive angle in degrees
    NEWTON                  = 72;    // Force values (N)
    FUNCTIONAL_THRESHOLD_POWER = 73; // FTP value in watts
    CALORIES                = 74;    // Energy consumption (kcal), integer.
    SPEED_CALIBRATION_OFFSET = 75;   // Calibration offset calculated from two speed sources (km/h)
    WEEK                    = 76;    // Week number
    CARDIO_LOAD             = 77;    // Load of cardio activity (exercise or activity), float
    MAXIMUM_AEROBIC_POWER   = 78;    // MAP value in watts
    MAXIMUM_AEROBIC_SPEED   = 79;    // MAS value in km/h
    MUSCLE_LOAD             = 80;    // Muscle load of an exercise. Related to power measurement (kJ)
    PERCEIVED_LOAD          = 81;    // Perceived load of an exercise, float       
}
      
message PbRangeOptions {
  optional int32 min_value = 1;
  optional int32 max_value = 2;
}

/*
Custom field option for field value validation. 
It uses field id 50000 as the range 50000-99999 is reserved for internal use within individual organizations, 
so we can use numbers in this range freely for in-house applications.
*/
extend google.protobuf.FieldOptions {
  optional PbDataType type = 50000;
}


/*
Custom message option for union messages. 
It uses field id 50001 as the range 50000-99999 is reserved for internal use within individual organizations, 
so we can use numbers in this range freely for in-house applications.
*/
extend google.protobuf.MessageOptions {
  optional bool is_union = 50001 [default=false];
}

/*
Custom field option for specifying range of a value
It uses field id 50000 as the range 50000-99999 is reserved for internal use within individual organizations, 
so we can use numbers in this range freely for in-house applications.
*/
extend google.protobuf.FieldOptions {
  optional PbRangeOptions range = 50003;
}    

message PbDate {
	required uint32 year = 1    [(type)=YEAR];
	required uint32 month = 2   [(type)=MONTH];
	required uint32 day = 3     [(type)=DAY];	
};

message PbTime {
    required uint32 hour = 1    [(type)=HOUR];
    required uint32 minute = 2  [(type)=MINUTE];
    required uint32 seconds = 3 [(type)=SECOND];
    optional uint32 millis = 4  [default = 0, (type)=MILLIS];
};

message PbSystemDateTime {
    required PbDate date = 1;
    required PbTime time = 2;
    
    /*
     The flag defines if the date & time combination originated
     from a trusted time source, such as PPT.com servers, GPS satelites,
     GPRS network, atomic clocks etc. 
     
     If the trusted flag is "false"
     the date time originated from untrusted source such as "set by user manually"
     or not set at all (some default value).
     
     For more information about "trusted time", please see SAGRFC27:
     (https://swa.polar.fi/sag/wiki/SAGRFC/SAGRFC27)
     
    */
    required bool trusted = 3;
};

message PbLocalDateTime {
    required PbDate date = 1;
    required PbTime time = 2;

    // For binary compatibility with PbSystemDateTime.
    required bool OBSOLETE_trusted = 3;

    // Time zone offset
    // Range [-720 - 840] minutes
    optional int32 time_zone_offset = 4 [(type)=TIME_ZONE_OFFSET];
};

message PbLocalDateTimeRange {
    optional PbLocalDateTime start_time = 1;
    optional PbLocalDateTime end_time = 2;
};

message PbDuration {
    optional uint32 hours   = 1 [default = 0, (type)=HOURS];
    optional uint32 minutes = 2 [default = 0, (type)=MINUTE];
    optional uint32 seconds = 3 [default = 0, (type)=SECOND];
    optional uint32 millis  = 4 [default = 0, (type)=MILLIS];
};

enum PbHeartRateView {
    HEART_RATE_VIEW_BPM = 1;
    HEART_RATE_VIEW_PERCENTS_OF_HR_RESERVE = 2;
    HEART_RATE_VIEW_PERCENTS_OF_MAX_HR = 3;
};

message PbLocation {
    enum Fix {
        FIX_NONE = 0;
        FIX_2D = 1;
        FIX_3D = 2;
    };
    required double latitude = 1 [(type)=LATITUDE];
    required double longitude = 2 [(type)=LONGITUDE];
    optional PbSystemDateTime timestamp = 3;
    optional Fix fix = 4 [default = FIX_NONE];
    optional uint32 satellites = 5 [default = 0];
};

/*
 Provides information when a sensor has been offline.
 ! All fields are required.
*/
message PbSensorOffline {
    // index of first offline point
    required uint32 start_index = 1;
    // index of last offline point, can have same value than start_index
    required uint32 stop_index = 2;
};

enum PbUnitSystem {
    METRIC = 1;
    IMPERIAL = 2;
};

enum PbTimeSelection {
    TIME_1 = 1;
    TIME_2 = 2;
};

enum PbTimeFormat {
    TIME_FORMAT_24H = 1;
    TIME_FORMAT_12H = 2;
};

enum PbTimeFormatSeparator {
    TIME_FORMAT_SEPARATOR_DOT = 1;
    TIME_FORMAT_SEPARATOR_COLON = 2;
};

enum PbStartDayOfWeek {
    MONDAY = 1;
    SATURDAY = 2;
    SUNDAY = 3;
};

enum PbDateFormatSeparator {
    DOT = 1;
    SLASH = 2;
    HYPHEN = 3;
};

enum PbDateFormat {
    DD_MM_YYYY = 1;
    MM_DD_YYYY = 2;
    YYYY_MM_DD = 3;
};

message PbVolume {
    // Volume
    // Range [0 - 100] %
    required uint32 volume = 1 [(type)=PERCENT];
};

// types of data that are suitable for bluetooth device features
// NOTE: DO NOT CHANGE THE NUMBERS, instead add new ones at the end
// of the enum
enum PbFeatureType{
    FEATURE_TYPE_HEART_RATE = 1;
    FEATURE_TYPE_RR_INTERVAL = 2;
    FEATURE_TYPE_SPEED = 3;
    FEATURE_TYPE_DISTANCE = 4;
    FEATURE_TYPE_BIKE_CADENCE = 5;
    FEATURE_TYPE_BIKE_POWER = 6;
    FEATURE_TYPE_GPS_LOCATION = 7;
    FEATURE_TYPE_RUNNING_CADENCE = 8;
    FEATURE_TYPE_PRESS_TEMPERATURE = 9;
    FEATURE_TYPE_ALTITUDE = 10;
    FEATURE_TYPE_STEPS = 11;
    FEATURE_TYPE_ACTIVITY = 12;
    FEATURE_TYPE_STRIDE_LENGTH = 13;
    FEATURE_TYPE_RSC_MOVING_TYPE = 14;
    FEATURE_TYPE_JUMP_HEIGTH = 15;
    FEATURE_TYPE_COMPASS_HEADING = 16;
    FEATURE_TYPE_GPS_SPEED = 17;
    FEATURE_TYPE_GPS_DISTANCE = 18;
    FEATURE_TYPE_GPS_ALTITUDE = 19;
    FEATURE_TYPE_BIKE_WHEEL_REVOLUTION = 20;
    FEATURE_TYPE_BIKE_CRANK_REVOLUTION = 21;
    FEATURE_TYPE_AS_SPEED = 22;
    FEATURE_TYPE_AS_CADENCE = 23;
    FEATURE_TYPE_AS_DISTANCE = 24;
    FEATURE_TYPE_AS_SWR_STATE = 25;
    FEATURE_TYPE_BATTERY_LEVEL = 26;
    FEATURE_TYPE_FILE_TRANSFER = 27;
    FEATURE_TYPE_PUSH_NOTIFICATIONS = 28;
    FEATURE_TYPE_WEIGHT_SCALE = 29;
    FEATURE_TYPE_REMOTE_BUTTONS = 30;
    FEATURE_TYPE_GOPRO = 31;
    FEATURE_TYPE_PP_INTERVAL = 32;
    FEATURE_TYPE_MEDIA_CONTROL = 33;
    FEATURE_TYPE_MOBILE_GPS = 34;
    FEATURE_TYPE_RUNNING_POWER = 35;
    FEATURE_TYPE_POLAR_SDK = 36;
    FEATURE_TYPE_HEALTH_THERMOMETER_TEMPERATURE = 37;
};

enum PbMovingType {
    WALKING = 0;
    RUNNING = 1;
    STANDING = 2;
};

enum PbOperationType {
    MULTIPLY = 1;
    SUM = 2;
};

enum PbExerciseFeedback {
    FEEDBACK_NONE = 1;
    FEEDBACK_1 = 2;
    FEEDBACK_2 = 3;
    FEEDBACK_3 = 4;
    FEEDBACK_4 = 5;
    FEEDBACK_5 = 6;
    FEEDBACK_6 = 7;
    FEEDBACK_7 = 8;
    FEEDBACK_8 = 9;
    FEEDBACK_9 = 10;
    FEEDBACK_10 = 11;
    FEEDBACK_11 = 12;
    FEEDBACK_12 = 13;
    FEEDBACK_13 = 14;
    FEEDBACK_14 = 15;
    FEEDBACK_15 = 16;
    FEEDBACK_16 = 17;
    FEEDBACK_17 = 18;
};

message PbStrideSensorCalibSettings {
    enum PbStrideCalibType {
        STRIDE_CALIB_MANUAL = 0;
        STRIDE_CALIB_AUTO = 1;
    };
    required float running_factor = 1;
    required PbStrideCalibType calib_type = 2;

    enum PbRunningFactorSource {
        RUNNING_FACTOR_SOURCE_DEFAULT             = 0; // Default value
        RUNNING_FACTOR_SOURCE_AUTO_CALIBRATION    = 1; // Auto calibration
        RUNNING_FACTOR_SOURCE_MANUAL_CALIBRATION  = 2; // Manual calibration
    };
    optional PbRunningFactorSource running_factor_source = 3 [default = RUNNING_FACTOR_SOURCE_DEFAULT];
};

enum PbHeartRateZoneSettingSource {
    HEART_RATE_ZONE_SETTING_SOURCE_DEFAULT     = 0; // HRmax based
    HEART_RATE_ZONE_SETTING_SOURCE_THRESHOLD   = 1; // An/aerobic threshold based
    HEART_RATE_ZONE_SETTING_SOURCE_FREE        = 2; // User's freely selected
};

enum PbPowerZoneSettingSource {
    POWER_ZONE_SETTING_SOURCE_DEFAULT     = 0; // See PbPowerZoneCalculationMethod
    POWER_ZONE_SETTING_SOURCE_FREE        = 1; // User's freely selected
};

enum PbSpeedZoneSettingSource {
    SPEED_ZONE_SETTING_SOURCE_DEFAULT     = 0; // See PbSpeedZoneCalculationMethod
    SPEED_ZONE_SETTING_SOURCE_FREE        = 1; // User's freely selected
};

// The method used to calculate power zones when source is POWER_ZONE_SETTING_SOURCE_DEFAULT
enum PbPowerZoneCalculationMethod {
    POWER_ZONE_CALCULATION_METHOD_UNKNOWN   = 0; // Fallback value for future-proofing
    POWER_ZONE_CALCULATION_METHOD_FTP_BASED = 1; // Power zones are calculated based on user's Functional Threshold Power (FTP), or estimated FTP if user has not explicitly set her FTP
    POWER_ZONE_CALCULATION_METHOD_MAP_BASED = 2; // Power zones are calculated based on user's Maximum Aerobic Power (MAP), or estimated MAP if user has not explicitly set her MAP
}

// The method used to calculate speed zones when source is SPEED_ZONE_SETTING_SOURCE_DEFAULT
enum PbSpeedZoneCalculationMethod {
    SPEED_ZONE_CALCULATION_METHOD_UNKNOWN                   = 0; // Fallback value for future-proofing
    SPEED_ZONE_CALCULATION_METHOD_SPORT_SPECIFIC_PREDEFINED = 1; // Speed zones are "calculated" using the legacy method, which is sport-specific zone limits pre-defined by Polar
    SPEED_ZONE_CALCULATION_METHOD_MAS_BASED                 = 2; // Speed zones are calculated based on user's Maximum Aerobic Speed (MAS), or estimated MAS if user has not explicitly set her MAS
}

enum PbMacType {
    MAC_TYPE_PUBLIC = 0;
    MAC_TYPE_STATIC = 1;
    MAC_TYPE_PRIVATE_NONRESOLVABLE = 2;
    MAC_TYPE_PRIVATE_RESOLVABLE = 3;
    MAC_TYPE_BT_CLASSIC = 4; //BT classic uses public address, but we use different type internally
};

enum PbSwimmingStyle {
    OTHER             = -1;    // Other (not swimming)
    TURN              = 0;     // Between swimming styles 
    OTHER_SWIMMING    = 10;    // Swimming style not definable but still swimming
    FREESTYLE         = 11;    // Freestyle
    BREASTSTROKE      = 12;    // Breaststroke
    BACKSTROKE        = 13;    // Backstroke
    BUTTERFLY         = 14;    // Butterfly
    DRILL             = 15;    // Any drill type (eg. kick board drills)
};

enum PbSwimmingPoolUnits {
    SWIMMING_POOL_METERS             = 0;    // Swimming has been exercised in meter sized pool
    SWIMMING_POOL_YARDS              = 1;    // Swimming has been exercise in yards sized pool
};

enum PbExerciseTargetType {
    EXERCISE_TARGET_TYPE_FREE = 0;
    EXERCISE_TARGET_TYPE_VOLUME = 1;
    EXERCISE_TARGET_TYPE_PHASED = 2;
    EXERCISE_TARGET_TYPE_ROUTE = 3;
    EXERCISE_TARGET_TYPE_STEADY_RACE_PACE = 4;
    EXERCISE_TARGET_TYPE_ROUTE_RACE_PACE = 5;
    EXERCISE_TARGET_TYPE_STRAVA_SEGMENT = 6;
    EXERCISE_TARGET_TYPE_STRENGTH_TRAINING = 7;
};

message PbWeek {
    // ISO-8601 week number
    required uint32 week_number_ISO8601 = 1 [(type)=WEEK];
    
    // Year
    required uint32 year = 2 [(type)=YEAR];

    // Range [-720 - 840] minutes
    required int32 time_zone_offset = 3 [(type)=TIME_ZONE_OFFSET];
    
    // Start day of the week at creation
    required PbStartDayOfWeek week_start_day  = 4;
};

//Enums for transferring button state to/from device
enum Buttons {
    //Guitar, Archer: up
    BUTTON_PLUS = 0; 
    //Guitar, Archer: down
    BUTTON_MINUS = 1;
    //Guitar, Archer: start
    BUTTON_OK = 2;
    //Guitar, Archer: light
    BUTTON_LIGHT = 3;
    //Guitar, Archer: back
    BUTTON_BACK = 4;
};

enum ButtonState {
    BUTTON_PRESSED = 0; 
    BUTTON_RELEASED = 1;
};

/*
    Sample types
*/
enum PbSampleType {
    SAMPLE_TYPE_UNDEFINED                       = 0;   // Not defined
    SAMPLE_TYPE_HEART_RATE                      = 1;   // Heart rate, bpm 
    SAMPLE_TYPE_CADENCE                         = 2;   // Cadence, Rotations per minute (rpm)
    SAMPLE_TYPE_ALTITUDE                        = 3;   // Altitude, meters 
    SAMPLE_TYPE_ALTITUDE_CALIBRATION            = 4;   // Calibration info for altitude: indicate start and stop indexes, used calibration value and operation type of calibration 
    SAMPLE_TYPE_TEMPERATURE                     = 5;   // Temperature, celcius
    SAMPLE_TYPE_SPEED                           = 6;   // Speed, km/h
    SAMPLE_TYPE_DISTANCE                        = 7;   // Distance, meters  
    SAMPLE_TYPE_STRIDE_LENGTH                   = 8;   // Stride length while running, cm
    SAMPLE_TYPE_STRIDE_CALIBRATION              = 9;   // Calibration info for stride: indicate start and stop indexes, used calibration value and operation type of calibration 
    SAMPLE_TYPE_FORWARD_ACCELERATION            = 10;  // Forward acceleration, m/s^2
    SAMPLE_TYPE_MOVING_TYPE                     = 11;  // Moving type, walking running, standing 
    SAMPLE_TYPE_LEFT_PEDAL_POWER                = 12;  // Power info from left pedal
    SAMPLE_TYPE_RIGHT_PEDAL_POWER               = 13;  // Power info from right pedal
    SAMPLE_TYPE_LEFT_PEDAL_POWER_CALIBRATION    = 14;  // Calibration info for left power: indicate start and stop indexes, used calibration value and operation type of calibration 
    SAMPLE_TYPE_RIGHT_PEDAL_POWER_CALIBRATION   = 15;  // Calibration info for right power: indicate start and stop indexes, used calibration value and operation type of calibration
    SAMPLE_TYPE_RR_INTERVAL                     = 16;  // RR-interval, ms
    SAMPLE_TYPE_ACCELERATION_MAD                = 17;  // Acceleration based Mean Amplitude Deviation (MAD), mg
};

/*
    Sample source types
*/
enum PbSampleSourceType {
    SAMPLE_SOURCE_TYPE_UNDEFINED                           = 0;  // Not defined
    SAMPLE_SOURCE_TYPE_OFFLINE                             = 1;  // Sample has no source, i.e., sample is offline
    SAMPLE_SOURCE_TYPE_HEART_RATE                          = 2;  // Heart rate measurement based samples   
    SAMPLE_SOURCE_TYPE_HEART_RATE_BLE                      = 3;  // BLE heart rate measurement based samples  
    SAMPLE_SOURCE_TYPE_HEART_RATE_5_KHZ                    = 4;  // 5 kHz heart rate measurement based samples  
    SAMPLE_SOURCE_TYPE_HEART_RATE_OPTICAL                  = 5;  // Optical heart rate measurement based samples  
    SAMPLE_SOURCE_TYPE_GPS                                 = 6;  // GPS measurement based samples                          
    SAMPLE_SOURCE_TYPE_STRIDE                              = 7;  // Stride measurement based samples
    SAMPLE_SOURCE_TYPE_WRIST_METRICS                       = 8;  // Samples that are based on wrist metrics like inertial (accelometer etc.) measurements 
    SAMPLE_SOURCE_TYPE_CHEST_METRICS                       = 9;  // Samples that are based on chest metrics like inertial (accelometer etc.) measurements 
    SAMPLE_SOURCE_TYPE_BIKE_PEDAL                          = 10; // Bike pedal measurement based samples 
    SAMPLE_SOURCE_TYPE_BIKE_WHEEL                          = 11; // Bike wheel measurement based samples 
    SAMPLE_SOURCE_TYPE_BIKE_CRANK                          = 12; // Bike crank measurement based samples 
    SAMPLE_SOURCE_TYPE_COMBINED_CHEST_METRICS_AND_GPS      = 13; // Samples that are combined from chest metrics and gps measurements 
    SAMPLE_SOURCE_TYPE_UPPER_BACK_METRICS                  = 14; // Samples that are based on upper back metrics like inertial (accelometer etc.) measurements 
    SAMPLE_SOURCE_TYPE_COMBINED_UPPER_BACK_METRICS_AND_GPS = 15; // Samples that are combined from upper back metrics and gps measurements 
};

/* Altitude recording setting values.
*  NOTE: DO NOT CHANGE THE NUMBERS, instead add new ones at the end
*  of the enum */
enum PbAltitudeSetting {
    ALTITUDE_OFF = 0;   // Off
    ALTITUDE_ON = 1;    // On
};

/* GPS recording setting values.
*  NOTE: DO NOT CHANGE THE NUMBERS, instead add new ones at the end
*  of the enum */
enum PbGPSSetting {
    GPS_OFF       = 0;      // Off
    GPS_ON_NORMAL = 1;      // On, normal, 1 sec rec rate
    GPS_ON_LONG   = 2;      // On, long, 60 sec rec rate
    GPS_ON_10_HZ  = 3;      // On, 10 Hz, 0.1 sec rec rate
    GPS_ON_MEDIUM = 4;      // On, medium, 30 sec rec rate  
};

/*
 Source for samples.
 ! All fields are required.
*/
message PbSampleSource {
    // Sample source 
    required PbSampleSourceType sample_source_type = 1;
    // Index of first point for a certain sample source
    required uint32 start_index = 2;
    // Index of last point for a certain sample source, can have same value than start_index
    required uint32 stop_index = 3;
};

message PbSensorCalibrationOffset
{
    // Source of the data which offset is calculated, e.g. wristmetrics uses SAMPLE_SOURCE_TYPE_WRIST_METRICS
    required PbSampleSourceType sample_source_type = 1;

    // Calibration offset value
    optional float speed_cal_offset = 2 [(type)=SPEED_CALIBRATION_OFFSET];
};

message PbCalibrationSettings
{
    // The type of the calibrate-able measurement (SAMPLE_TYPE_SPEED etc.)
    required PbSampleType sample_type = 1;
 
    // Calibration value use enable on/off (existing calibration value is used if true).
    optional bool calibration_enabled = 2;
     
    // Calibration calculation enable on/off. New calibration offset value for exercise is calculated if true.
    optional bool calibration_calculation_enabled = 3;
};

message PbAccelerationMetrics
{
    // Source of the acceleration data i.e location of the sensor (SAMPLE_SOURCE_TYPE_WRIST_METRICS etc.)
    required PbSampleSourceType sample_source_type = 1;

    // Calibration settings
    repeated PbCalibrationSettings calibration_settings = 2;
};


   
message PbAutoPause {

    // Available trigger types
    enum PbAutoPauseTrigger  {
        AUTO_PAUSE_OFF = 0;
        AUTO_PAUSE_TRIGGER_SPEED = 1;
    };

    // Used trigger 
    required PbAutoPauseTrigger trigger = 1;
    
    // Speed threshold for pausing/resuming
    optional float speed_threshold = 2 [(type)=SPEED];
};

// Autolap related settings
message PbAutoLapSettings {

    /* Automatic lap setting modes.
    *  NOTE: DO NOT CHANGE THE NUMBERS, instead add new ones at the end
    *  of the enum */
    enum PbAutomaticLap {
        AUTOMATIC_LAP_OFF = 1;
        AUTOMATIC_LAP_DISTANCE = 2;
        AUTOMATIC_LAP_DURATION = 3;
        AUTOMATIC_LAP_LOCATION = 4;
    };

    // Autolap mode
    required PbAutomaticLap automatic_lap = 1;

    // Distance based autolap trigger
    // range [100 - 99900] m
    optional float automatic_lap_distance = 2 [(type)=DISTANCE];

    // Duration based autolap trigger
    optional PbDuration automatic_lap_duration = 3;
};

enum PbHeartTouch {
    HEART_TOUCH_OFF = 1;
    HEART_TOUCH_ACTIVATE_BACKLIGHT = 2;
    HEART_TOUCH_SHOW_PREVIOUS_LAP = 3;
    HEART_TOUCH_SHOW_TIME_OF_DAY = 4;
};

enum PbTapButtonAction {
    TAP_BUTTON_OFF = 1;
    TAP_BUTTON_TAKE_LAP = 2;
    TAP_BUTTON_CHANGE_TRAINING_VIEW = 3;
    TAP_BUTTON_ACTIVATE_BACKLIGHT = 4;
};

// Obsolete, do not extend with new values
enum PbHandedness {
    WU_IN_LEFT_HAND = 1;
    WU_IN_RIGHT_HAND = 2;
    WU_IN_NECKLACE = 3;
};

enum PbDeviceLocation {
    DEVICE_LOCATION_UNDEFINED = 0;
    DEVICE_LOCATION_OTHER = 1;
    DEVICE_LOCATION_WRIST_LEFT = 2;
    DEVICE_LOCATION_WRIST_RIGHT = 3;
    DEVICE_LOCATION_NECKLACE = 4;
    DEVICE_LOCATION_CHEST = 5;
    DEVICE_LOCATION_UPPER_BACK = 6;
    DEVICE_LOCATION_FOOT_LEFT = 7;
    DEVICE_LOCATION_FOOT_RIGHT = 8;
    DEVICE_LOCATION_LOWER_ARM_LEFT = 9;
    DEVICE_LOCATION_LOWER_ARM_RIGHT = 10;
    DEVICE_LOCATION_UPPER_ARM_LEFT = 11;
    DEVICE_LOCATION_UPPER_ARM_RIGHT = 12;
    DEVICE_LOCATION_BIKE_MOUNT = 13;
};

message PbCardioLoad {
    // Load from activity data within the calculated time period
    required float activity_load = 1 [(type)=CARDIO_LOAD];

    // Load from exercises within the calculated time period
    required float exercise_load = 2 [(type)=CARDIO_LOAD];
};

/*
 Session RPE (Rating Perceived Exertion) on a scale 1-10 (adopted Borg's scale).
 Describes how demanding the whole exercise was. Only one rating for multisport.
 NOTE! Naming of the enums may differ from respective UI texts (e.g. RPE_EXTREME may be shown as "Maximum").
 */
enum PbSessionRPE {
    RPE_NONE = 1;           // Very easy
    RPE_EASY = 2;
    RPE_LIGHT = 3;
    RPE_FAIRLY_BRISK = 4;
    RPE_BRISK = 5;
    RPE_MODERATE = 6;
    RPE_FAIRLY_HARD = 7;
    RPE_HARD = 8;
    RPE_EXHAUSTING = 9;
    RPE_EXTREME = 10;
};

/*
 Perceived load a.k.a. RPE Load a.k.a. Subjective Load: internal training load of a session.
 Calculated by multiplying the fields below: session_rpe * duration in minutes
 Note! session_rpe can be modified afterwards in TC, mobile or service
*/
message PbPerceivedLoad {
    // Hardness of the exercise    
    required PbSessionRPE session_rpe = 1 [default = RPE_MODERATE];
    
    // duration in seconds
    required uint32 duration = 2;
};

enum PbMuscleLoadSetting {
    MUSCLE_LOAD_OFF = 0;
    MUSCLE_LOAD_ON = 1;
};

enum PbMuscleSoreness {
    MS_UNDEFINED = -1;
    MS_NONE = 0;
    MS_SOME = 1;
    MS_MUCH = 2;
};

enum PbOverallFatigue {
    OF_UNDEFINED = -1;
    OF_NORMAL = 0;
    OF_A_LITTLE = 1;
    OF_MUCH = 2;
};

enum PbSleepUserRating {
    PB_SLEPT_UNDEFINED = -1;
    PB_SLEPT_POORLY = 0;
    PB_SLEPT_SOMEWHAT_POORLY = 1;
    PB_SLEPT_NEITHER_POORLY_NOR_WELL = 2;
    PB_SLEPT_SOMEWHAT_WELL = 3;
    PB_SLEPT_WELL = 4;
};


enum PbDailyBalanceFeedback {
    DB_NOT_CALCULATED = -1;
    DB_SICK = 0;
    DB_FATIGUE_TRY_TO_REDUCE_TRAINING_LOAD_INJURED = 1;
    DB_FATIGUE_TRY_TO_REDUCE_TRAINING_LOAD = 2;
    DB_LIMITED_TRAINING_RESPONSE_OTHER_INJURED = 3;
    DB_LIMITED_TRAINING_RESPONSE_OTHER = 4;
    DB_RESPONDING_WELL_CAN_CONTINUE_IF_INJURY_ALLOWS = 5;
    DB_RESPONDING_WELL_CAN_CONTINUE = 6;
    DB_YOU_COULD_DO_MORE_TRAINING_IF_INJURY_ALLOWS = 7;
    DB_YOU_COULD_DO_MORE_TRAINING = 8;
    DB_YOU_SEEM_TO_BE_STRAINED_INJURED = 9;
    DB_YOU_SEEM_TO_BE_STRAINED = 10;
};

enum PbReadinessForSpeedAndStrengthTraining {
    RSST_NOT_CALCULATED = -1;
    RSST_A1_RECOVERED_READY_FOR_ALL_TRAINING = 0;
    RSST_A2_RECOVERED_READY_FOR_ALL_TRAINING_IF_FEELING_OK_NIGHTLY_RECHARGE_COMPROMISED = 1;
    RSST_A3_RECOVERED_READY_FOR_ALL_TRAINING_IF_FEELING_OK_POSSIBLY_STRESSED = 2;
    RSST_A4_RECOVERED_READY_FOR_SPEED_AND_STRENGTH_TRAINING = 3;
    RSST_B1_RECOVERED_READY_FOR_SPEED_AND_STRENGTH_TRAINING_AND_LIGHT_CARDIO = 4;
    RSST_B2_RECOVERED_READY_FOR_SPEED_AND_STRENGTH_TRAINING_AND_LIGHT_CARDIO_POOR_NIGHTLY_RECHARGE = 5;
    RSST_B3_RECOVERED_READY_FOR_SPEED_AND_STRENGTH_TRAINING_AND_LIGHT_CARDIO_POOR_CARDIO_RECOVERY = 6;
    RSST_B4_NOT_RECOVERED_NO_LEG_TRAINING_OR_INTENSIVE_CARDIO = 7;
    RSST_B5_NOT_RECOVERED_NO_LEG_TRAINING_OR_INTENSIVE_CARDIO_POOR_NIGHTLY_RECHARGE = 8;
    RSST_C1_NOT_RECOVERED_NO_STRENGTH_OR_INTENSIVE_CARDIO = 9;
    RSST_C2_NOT_RECOVERED_NO_STRENGTH_OR_INTENSIVE_CARDIO_POOR_NIGHTLY_RECHARGE = 10;
    RSST_D1_RECOVERED_BUT_INJURY_AND_ILLNESS_RISK_CAUSED_BY_CARDIO_TRAINING = 11;
    RSST_D2_NOT_RECOVERED_AND_INJURY_AND_ILLNESS_RISK_CAUSED_BY_CARDIO_TRAINING = 12;
};

enum PbStrengthTrainingRoundRepetitionType {
    // Currently NORMAL is the only type. Other types, such as AMRAP, can/will be added later.
    NORMAL      = 0;
}

enum PbStrengthTrainingWorkoutPhase {
	WORK        = 0;    // Round with workout sets
	WARM_UP     = 1;    // Round prepares exerciser for upcoming work rounds. Typically the first round of a training session.
	COOL_DOWN   = 2;    // Round for cooling down. Typically the last round of a training session.
}
