// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: user_physdata.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// PHYSDATA.BPB=PbUserPhysData

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Data_PbUserBirthday {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// value should be in past.
  var value: PbDate {
    get {return _value ?? PbDate()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var lastModified: PbSystemDateTime {
    get {return _lastModified ?? PbSystemDateTime()}
    set {_lastModified = newValue}
  }
  /// Returns true if `lastModified` has been explicitly set.
  var hasLastModified: Bool {return self._lastModified != nil}
  /// Clears the value of `lastModified`. Subsequent reads from it will return its default value.
  mutating func clearLastModified() {self._lastModified = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _value: PbDate? = nil
  fileprivate var _lastModified: PbSystemDateTime? = nil
}

struct Data_PbUserGender {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Data_PbUserGender.Gender {
    get {return _value ?? .male}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var lastModified: PbSystemDateTime {
    get {return _lastModified ?? PbSystemDateTime()}
    set {_lastModified = newValue}
  }
  /// Returns true if `lastModified` has been explicitly set.
  var hasLastModified: Bool {return self._lastModified != nil}
  /// Clears the value of `lastModified`. Subsequent reads from it will return its default value.
  mutating func clearLastModified() {self._lastModified = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Gender: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case male // = 1
    case female // = 2

    init() {
      self = .male
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .male
      case 2: self = .female
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .male: return 1
      case .female: return 2
      }
    }

  }

  init() {}

  fileprivate var _value: Data_PbUserGender.Gender? = nil
  fileprivate var _lastModified: PbSystemDateTime? = nil
}

#if swift(>=4.2)

extension Data_PbUserGender.Gender: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct Data_PbUserHrAttribute {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// range [0-250] 1/min
  var value: UInt32 {
    get {return _value ?? 0}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var lastModified: PbSystemDateTime {
    get {return _lastModified ?? PbSystemDateTime()}
    set {_lastModified = newValue}
  }
  /// Returns true if `lastModified` has been explicitly set.
  var hasLastModified: Bool {return self._lastModified != nil}
  /// Clears the value of `lastModified`. Subsequent reads from it will return its default value.
  mutating func clearLastModified() {self._lastModified = nil}

  var settingSource: Data_PbUserHrAttribute.HrSettingSource {
    get {return _settingSource ?? .sourceDefault}
    set {_settingSource = newValue}
  }
  /// Returns true if `settingSource` has been explicitly set.
  var hasSettingSource: Bool {return self._settingSource != nil}
  /// Clears the value of `settingSource`. Subsequent reads from it will return its default value.
  mutating func clearSettingSource() {self._settingSource = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum HrSettingSource: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case sourceDefault // = 0
    case sourceAgeBased // = 1
    case sourceUser // = 2
    case sourceMeasured // = 3
    case sourceKeep // = 4

    init() {
      self = .sourceDefault
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .sourceDefault
      case 1: self = .sourceAgeBased
      case 2: self = .sourceUser
      case 3: self = .sourceMeasured
      case 4: self = .sourceKeep
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .sourceDefault: return 0
      case .sourceAgeBased: return 1
      case .sourceUser: return 2
      case .sourceMeasured: return 3
      case .sourceKeep: return 4
      }
    }

  }

  init() {}

  fileprivate var _value: UInt32? = nil
  fileprivate var _lastModified: PbSystemDateTime? = nil
  fileprivate var _settingSource: Data_PbUserHrAttribute.HrSettingSource? = nil
}

#if swift(>=4.2)

extension Data_PbUserHrAttribute.HrSettingSource: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct Data_PbUserWeight {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// User weight (aka. User mass)
  /// range: [0.0-300.0] kg
  var value: Float {
    get {return _value ?? 0}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var lastModified: PbSystemDateTime {
    get {return _lastModified ?? PbSystemDateTime()}
    set {_lastModified = newValue}
  }
  /// Returns true if `lastModified` has been explicitly set.
  var hasLastModified: Bool {return self._lastModified != nil}
  /// Clears the value of `lastModified`. Subsequent reads from it will return its default value.
  mutating func clearLastModified() {self._lastModified = nil}

  var settingSource: Data_PbUserWeight.WeightSettingSource {
    get {return _settingSource ?? .sourceDefault}
    set {_settingSource = newValue}
  }
  /// Returns true if `settingSource` has been explicitly set.
  var hasSettingSource: Bool {return self._settingSource != nil}
  /// Clears the value of `settingSource`. Subsequent reads from it will return its default value.
  mutating func clearSettingSource() {self._settingSource = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum WeightSettingSource: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case sourceDefault // = 0
    case sourceUser // = 2
    case sourceMeasured // = 3

    init() {
      self = .sourceDefault
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .sourceDefault
      case 2: self = .sourceUser
      case 3: self = .sourceMeasured
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .sourceDefault: return 0
      case .sourceUser: return 2
      case .sourceMeasured: return 3
      }
    }

  }

  init() {}

  fileprivate var _value: Float? = nil
  fileprivate var _lastModified: PbSystemDateTime? = nil
  fileprivate var _settingSource: Data_PbUserWeight.WeightSettingSource? = nil
}

#if swift(>=4.2)

extension Data_PbUserWeight.WeightSettingSource: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct Data_PbUserHeight {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// User Height
  /// range: [90.0-240.0] cm
  var value: Float {
    get {return _value ?? 0}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var lastModified: PbSystemDateTime {
    get {return _lastModified ?? PbSystemDateTime()}
    set {_lastModified = newValue}
  }
  /// Returns true if `lastModified` has been explicitly set.
  var hasLastModified: Bool {return self._lastModified != nil}
  /// Clears the value of `lastModified`. Subsequent reads from it will return its default value.
  mutating func clearLastModified() {self._lastModified = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _value: Float? = nil
  fileprivate var _lastModified: PbSystemDateTime? = nil
}

struct Data_PbUserVo2Max {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  /// Range: [10-95] ml/kg/min
  var value: UInt32 {
    get {return _value ?? 0}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var lastModified: PbSystemDateTime {
    get {return _lastModified ?? PbSystemDateTime()}
    set {_lastModified = newValue}
  }
  /// Returns true if `lastModified` has been explicitly set.
  var hasLastModified: Bool {return self._lastModified != nil}
  /// Clears the value of `lastModified`. Subsequent reads from it will return its default value.
  mutating func clearLastModified() {self._lastModified = nil}

  var settingSource: Data_PbUserVo2Max.Vo2MaxSettingSource {
    get {return _settingSource ?? .sourceDefault}
    set {_settingSource = newValue}
  }
  /// Returns true if `settingSource` has been explicitly set.
  var hasSettingSource: Bool {return self._settingSource != nil}
  /// Clears the value of `settingSource`. Subsequent reads from it will return its default value.
  mutating func clearSettingSource() {self._settingSource = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Vo2MaxSettingSource: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case sourceDefault // = 0
    case sourceEstimate // = 1
    case sourceUser // = 2
    case sourceFitnesstest // = 3

    init() {
      self = .sourceDefault
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .sourceDefault
      case 1: self = .sourceEstimate
      case 2: self = .sourceUser
      case 3: self = .sourceFitnesstest
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .sourceDefault: return 0
      case .sourceEstimate: return 1
      case .sourceUser: return 2
      case .sourceFitnesstest: return 3
      }
    }

  }

  init() {}

  fileprivate var _value: UInt32? = nil
  fileprivate var _lastModified: PbSystemDateTime? = nil
  fileprivate var _settingSource: Data_PbUserVo2Max.Vo2MaxSettingSource? = nil
}

#if swift(>=4.2)

extension Data_PbUserVo2Max.Vo2MaxSettingSource: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct Data_PbUserTrainingBackground {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Data_PbUserTrainingBackground.TrainingBackground {
    get {return _value ?? .occasional}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var lastModified: PbSystemDateTime {
    get {return _lastModified ?? PbSystemDateTime()}
    set {_lastModified = newValue}
  }
  /// Returns true if `lastModified` has been explicitly set.
  var hasLastModified: Bool {return self._lastModified != nil}
  /// Clears the value of `lastModified`. Subsequent reads from it will return its default value.
  mutating func clearLastModified() {self._lastModified = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TrainingBackground: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case occasional // = 10
    case regular // = 20
    case frequent // = 30
    case heavy // = 40
    case semiPro // = 50
    case pro // = 60

    init() {
      self = .occasional
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 10: self = .occasional
      case 20: self = .regular
      case 30: self = .frequent
      case 40: self = .heavy
      case 50: self = .semiPro
      case 60: self = .pro
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .occasional: return 10
      case .regular: return 20
      case .frequent: return 30
      case .heavy: return 40
      case .semiPro: return 50
      case .pro: return 60
      }
    }

  }

  init() {}

  fileprivate var _value: Data_PbUserTrainingBackground.TrainingBackground? = nil
  fileprivate var _lastModified: PbSystemDateTime? = nil
}

#if swift(>=4.2)

extension Data_PbUserTrainingBackground.TrainingBackground: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct Data_PbUserTypicalDay {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Data_PbUserTypicalDay.TypicalDay {
    get {return _value ?? .mostlySitting}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var lastModified: PbSystemDateTime {
    get {return _lastModified ?? PbSystemDateTime()}
    set {_lastModified = newValue}
  }
  /// Returns true if `lastModified` has been explicitly set.
  var hasLastModified: Bool {return self._lastModified != nil}
  /// Clears the value of `lastModified`. Subsequent reads from it will return its default value.
  mutating func clearLastModified() {self._lastModified = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypicalDay: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case mostlySitting // = 1
    case mostlyStanding // = 2
    case mostlyMoving // = 3

    init() {
      self = .mostlySitting
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .mostlySitting
      case 2: self = .mostlyStanding
      case 3: self = .mostlyMoving
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .mostlySitting: return 1
      case .mostlyStanding: return 2
      case .mostlyMoving: return 3
      }
    }

  }

  init() {}

  fileprivate var _value: Data_PbUserTypicalDay.TypicalDay? = nil
  fileprivate var _lastModified: PbSystemDateTime? = nil
}

#if swift(>=4.2)

extension Data_PbUserTypicalDay.TypicalDay: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct Data_PbSleepGoal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The Sleep Goal of the user, in minutes. Can be null.
  var sleepGoalMinutes: UInt32 {
    get {return _sleepGoalMinutes ?? 0}
    set {_sleepGoalMinutes = newValue}
  }
  /// Returns true if `sleepGoalMinutes` has been explicitly set.
  var hasSleepGoalMinutes: Bool {return self._sleepGoalMinutes != nil}
  /// Clears the value of `sleepGoalMinutes`. Subsequent reads from it will return its default value.
  mutating func clearSleepGoalMinutes() {self._sleepGoalMinutes = nil}

  var lastModified: PbSystemDateTime {
    get {return _lastModified ?? PbSystemDateTime()}
    set {_lastModified = newValue}
  }
  /// Returns true if `lastModified` has been explicitly set.
  var hasLastModified: Bool {return self._lastModified != nil}
  /// Clears the value of `lastModified`. Subsequent reads from it will return its default value.
  mutating func clearLastModified() {self._lastModified = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sleepGoalMinutes: UInt32? = nil
  fileprivate var _lastModified: PbSystemDateTime? = nil
}

struct Data_PbUserPhysData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var birthday: Data_PbUserBirthday {
    get {return _storage._birthday ?? Data_PbUserBirthday()}
    set {_uniqueStorage()._birthday = newValue}
  }
  /// Returns true if `birthday` has been explicitly set.
  var hasBirthday: Bool {return _storage._birthday != nil}
  /// Clears the value of `birthday`. Subsequent reads from it will return its default value.
  mutating func clearBirthday() {_uniqueStorage()._birthday = nil}

  var gender: Data_PbUserGender {
    get {return _storage._gender ?? Data_PbUserGender()}
    set {_uniqueStorage()._gender = newValue}
  }
  /// Returns true if `gender` has been explicitly set.
  var hasGender: Bool {return _storage._gender != nil}
  /// Clears the value of `gender`. Subsequent reads from it will return its default value.
  mutating func clearGender() {_uniqueStorage()._gender = nil}

  var weight: Data_PbUserWeight {
    get {return _storage._weight ?? Data_PbUserWeight()}
    set {_uniqueStorage()._weight = newValue}
  }
  /// Returns true if `weight` has been explicitly set.
  var hasWeight: Bool {return _storage._weight != nil}
  /// Clears the value of `weight`. Subsequent reads from it will return its default value.
  mutating func clearWeight() {_uniqueStorage()._weight = nil}

  var height: Data_PbUserHeight {
    get {return _storage._height ?? Data_PbUserHeight()}
    set {_uniqueStorage()._height = newValue}
  }
  /// Returns true if `height` has been explicitly set.
  var hasHeight: Bool {return _storage._height != nil}
  /// Clears the value of `height`. Subsequent reads from it will return its default value.
  mutating func clearHeight() {_uniqueStorage()._height = nil}

  var maximumHeartrate: Data_PbUserHrAttribute {
    get {return _storage._maximumHeartrate ?? Data_PbUserHrAttribute()}
    set {_uniqueStorage()._maximumHeartrate = newValue}
  }
  /// Returns true if `maximumHeartrate` has been explicitly set.
  var hasMaximumHeartrate: Bool {return _storage._maximumHeartrate != nil}
  /// Clears the value of `maximumHeartrate`. Subsequent reads from it will return its default value.
  mutating func clearMaximumHeartrate() {_uniqueStorage()._maximumHeartrate = nil}

  var restingHeartrate: Data_PbUserHrAttribute {
    get {return _storage._restingHeartrate ?? Data_PbUserHrAttribute()}
    set {_uniqueStorage()._restingHeartrate = newValue}
  }
  /// Returns true if `restingHeartrate` has been explicitly set.
  var hasRestingHeartrate: Bool {return _storage._restingHeartrate != nil}
  /// Clears the value of `restingHeartrate`. Subsequent reads from it will return its default value.
  mutating func clearRestingHeartrate() {_uniqueStorage()._restingHeartrate = nil}

  var vo2Max: Data_PbUserVo2Max {
    get {return _storage._vo2Max ?? Data_PbUserVo2Max()}
    set {_uniqueStorage()._vo2Max = newValue}
  }
  /// Returns true if `vo2Max` has been explicitly set.
  var hasVo2Max: Bool {return _storage._vo2Max != nil}
  /// Clears the value of `vo2Max`. Subsequent reads from it will return its default value.
  mutating func clearVo2Max() {_uniqueStorage()._vo2Max = nil}

  var trainingBackground: Data_PbUserTrainingBackground {
    get {return _storage._trainingBackground ?? Data_PbUserTrainingBackground()}
    set {_uniqueStorage()._trainingBackground = newValue}
  }
  /// Returns true if `trainingBackground` has been explicitly set.
  var hasTrainingBackground: Bool {return _storage._trainingBackground != nil}
  /// Clears the value of `trainingBackground`. Subsequent reads from it will return its default value.
  mutating func clearTrainingBackground() {_uniqueStorage()._trainingBackground = nil}

  var typicalDay: Data_PbUserTypicalDay {
    get {return _storage._typicalDay ?? Data_PbUserTypicalDay()}
    set {_uniqueStorage()._typicalDay = newValue}
  }
  /// Returns true if `typicalDay` has been explicitly set.
  var hasTypicalDay: Bool {return _storage._typicalDay != nil}
  /// Clears the value of `typicalDay`. Subsequent reads from it will return its default value.
  mutating func clearTypicalDay() {_uniqueStorage()._typicalDay = nil}

  /// The Sleep Goal of the user
  var sleepGoal: Data_PbSleepGoal {
    get {return _storage._sleepGoal ?? Data_PbSleepGoal()}
    set {_uniqueStorage()._sleepGoal = newValue}
  }
  /// Returns true if `sleepGoal` has been explicitly set.
  var hasSleepGoal: Bool {return _storage._sleepGoal != nil}
  /// Clears the value of `sleepGoal`. Subsequent reads from it will return its default value.
  mutating func clearSleepGoal() {_uniqueStorage()._sleepGoal = nil}

  ///
  /// Timestamps for the whole component: these are updated
  /// if any of the component fields are updated.
  var lastModified: PbSystemDateTime {
    get {return _storage._lastModified ?? PbSystemDateTime()}
    set {_uniqueStorage()._lastModified = newValue}
  }
  /// Returns true if `lastModified` has been explicitly set.
  var hasLastModified: Bool {return _storage._lastModified != nil}
  /// Clears the value of `lastModified`. Subsequent reads from it will return its default value.
  mutating func clearLastModified() {_uniqueStorage()._lastModified = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Data_PbUserBirthday: @unchecked Sendable {}
extension Data_PbUserGender: @unchecked Sendable {}
extension Data_PbUserGender.Gender: @unchecked Sendable {}
extension Data_PbUserHrAttribute: @unchecked Sendable {}
extension Data_PbUserHrAttribute.HrSettingSource: @unchecked Sendable {}
extension Data_PbUserWeight: @unchecked Sendable {}
extension Data_PbUserWeight.WeightSettingSource: @unchecked Sendable {}
extension Data_PbUserHeight: @unchecked Sendable {}
extension Data_PbUserVo2Max: @unchecked Sendable {}
extension Data_PbUserVo2Max.Vo2MaxSettingSource: @unchecked Sendable {}
extension Data_PbUserTrainingBackground: @unchecked Sendable {}
extension Data_PbUserTrainingBackground.TrainingBackground: @unchecked Sendable {}
extension Data_PbUserTypicalDay: @unchecked Sendable {}
extension Data_PbUserTypicalDay.TypicalDay: @unchecked Sendable {}
extension Data_PbSleepGoal: @unchecked Sendable {}
extension Data_PbUserPhysData: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "data"

extension Data_PbUserBirthday: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserBirthday"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .standard(proto: "last_modified"),
  ]

  public var isInitialized: Bool {
    if self._value == nil {return false}
    if self._lastModified == nil {return false}
    if let v = self._value, !v.isInitialized {return false}
    if let v = self._lastModified, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lastModified) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._lastModified {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserBirthday, rhs: Data_PbUserBirthday) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs._lastModified != rhs._lastModified {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserGender: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserGender"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .standard(proto: "last_modified"),
  ]

  public var isInitialized: Bool {
    if self._value == nil {return false}
    if self._lastModified == nil {return false}
    if let v = self._lastModified, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._value) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lastModified) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._value {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._lastModified {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserGender, rhs: Data_PbUserGender) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs._lastModified != rhs._lastModified {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserGender.Gender: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "MALE"),
    2: .same(proto: "FEMALE"),
  ]
}

extension Data_PbUserHrAttribute: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserHrAttribute"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .standard(proto: "last_modified"),
    3: .standard(proto: "setting_source"),
  ]

  public var isInitialized: Bool {
    if self._value == nil {return false}
    if self._lastModified == nil {return false}
    if let v = self._lastModified, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._value) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lastModified) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._settingSource) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._value {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._lastModified {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._settingSource {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserHrAttribute, rhs: Data_PbUserHrAttribute) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs._lastModified != rhs._lastModified {return false}
    if lhs._settingSource != rhs._settingSource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserHrAttribute.HrSettingSource: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SOURCE_DEFAULT"),
    1: .same(proto: "SOURCE_AGE_BASED"),
    2: .same(proto: "SOURCE_USER"),
    3: .same(proto: "SOURCE_MEASURED"),
    4: .same(proto: "SOURCE_KEEP"),
  ]
}

extension Data_PbUserWeight: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserWeight"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .standard(proto: "last_modified"),
    3: .standard(proto: "setting_source"),
  ]

  public var isInitialized: Bool {
    if self._value == nil {return false}
    if self._lastModified == nil {return false}
    if let v = self._lastModified, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self._value) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lastModified) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._settingSource) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._value {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._lastModified {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._settingSource {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserWeight, rhs: Data_PbUserWeight) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs._lastModified != rhs._lastModified {return false}
    if lhs._settingSource != rhs._settingSource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserWeight.WeightSettingSource: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SOURCE_DEFAULT"),
    2: .same(proto: "SOURCE_USER"),
    3: .same(proto: "SOURCE_MEASURED"),
  ]
}

extension Data_PbUserHeight: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserHeight"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .standard(proto: "last_modified"),
  ]

  public var isInitialized: Bool {
    if self._value == nil {return false}
    if self._lastModified == nil {return false}
    if let v = self._lastModified, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self._value) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lastModified) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._value {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._lastModified {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserHeight, rhs: Data_PbUserHeight) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs._lastModified != rhs._lastModified {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserVo2Max: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserVo2Max"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .standard(proto: "last_modified"),
    3: .standard(proto: "setting_source"),
  ]

  public var isInitialized: Bool {
    if self._value == nil {return false}
    if self._lastModified == nil {return false}
    if let v = self._lastModified, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._value) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lastModified) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._settingSource) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._value {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._lastModified {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._settingSource {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserVo2Max, rhs: Data_PbUserVo2Max) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs._lastModified != rhs._lastModified {return false}
    if lhs._settingSource != rhs._settingSource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserVo2Max.Vo2MaxSettingSource: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SOURCE_DEFAULT"),
    1: .same(proto: "SOURCE_ESTIMATE"),
    2: .same(proto: "SOURCE_USER"),
    3: .same(proto: "SOURCE_FITNESSTEST"),
  ]
}

extension Data_PbUserTrainingBackground: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserTrainingBackground"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .standard(proto: "last_modified"),
  ]

  public var isInitialized: Bool {
    if self._value == nil {return false}
    if self._lastModified == nil {return false}
    if let v = self._lastModified, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._value) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lastModified) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._value {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._lastModified {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserTrainingBackground, rhs: Data_PbUserTrainingBackground) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs._lastModified != rhs._lastModified {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserTrainingBackground.TrainingBackground: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    10: .same(proto: "OCCASIONAL"),
    20: .same(proto: "REGULAR"),
    30: .same(proto: "FREQUENT"),
    40: .same(proto: "HEAVY"),
    50: .same(proto: "SEMI_PRO"),
    60: .same(proto: "PRO"),
  ]
}

extension Data_PbUserTypicalDay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserTypicalDay"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .standard(proto: "last_modified"),
  ]

  public var isInitialized: Bool {
    if self._value == nil {return false}
    if self._lastModified == nil {return false}
    if let v = self._lastModified, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._value) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lastModified) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._value {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._lastModified {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserTypicalDay, rhs: Data_PbUserTypicalDay) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs._lastModified != rhs._lastModified {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserTypicalDay.TypicalDay: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "MOSTLY_SITTING"),
    2: .same(proto: "MOSTLY_STANDING"),
    3: .same(proto: "MOSTLY_MOVING"),
  ]
}

extension Data_PbSleepGoal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbSleepGoal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sleep_goal_minutes"),
    2: .standard(proto: "last_modified"),
  ]

  public var isInitialized: Bool {
    if let v = self._lastModified, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._sleepGoalMinutes) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lastModified) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sleepGoalMinutes {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._lastModified {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbSleepGoal, rhs: Data_PbSleepGoal) -> Bool {
    if lhs._sleepGoalMinutes != rhs._sleepGoalMinutes {return false}
    if lhs._lastModified != rhs._lastModified {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserPhysData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserPhysData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "birthday"),
    2: .same(proto: "gender"),
    3: .same(proto: "weight"),
    4: .same(proto: "height"),
    5: .standard(proto: "maximum_heartrate"),
    6: .standard(proto: "resting_heartrate"),
    10: .same(proto: "vo2max"),
    11: .standard(proto: "training_background"),
    12: .standard(proto: "typical_day"),
    17: .standard(proto: "sleep_goal"),
    100: .standard(proto: "last_modified"),
  ]

  fileprivate class _StorageClass {
    var _birthday: Data_PbUserBirthday? = nil
    var _gender: Data_PbUserGender? = nil
    var _weight: Data_PbUserWeight? = nil
    var _height: Data_PbUserHeight? = nil
    var _maximumHeartrate: Data_PbUserHrAttribute? = nil
    var _restingHeartrate: Data_PbUserHrAttribute? = nil
    var _vo2Max: Data_PbUserVo2Max? = nil
    var _trainingBackground: Data_PbUserTrainingBackground? = nil
    var _typicalDay: Data_PbUserTypicalDay? = nil
    var _sleepGoal: Data_PbSleepGoal? = nil
    var _lastModified: PbSystemDateTime? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _birthday = source._birthday
      _gender = source._gender
      _weight = source._weight
      _height = source._height
      _maximumHeartrate = source._maximumHeartrate
      _restingHeartrate = source._restingHeartrate
      _vo2Max = source._vo2Max
      _trainingBackground = source._trainingBackground
      _typicalDay = source._typicalDay
      _sleepGoal = source._sleepGoal
      _lastModified = source._lastModified
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._birthday == nil {return false}
      if _storage._gender == nil {return false}
      if let v = _storage._birthday, !v.isInitialized {return false}
      if let v = _storage._gender, !v.isInitialized {return false}
      if let v = _storage._weight, !v.isInitialized {return false}
      if let v = _storage._height, !v.isInitialized {return false}
      if let v = _storage._maximumHeartrate, !v.isInitialized {return false}
      if let v = _storage._restingHeartrate, !v.isInitialized {return false}
      if let v = _storage._vo2Max, !v.isInitialized {return false}
      if let v = _storage._trainingBackground, !v.isInitialized {return false}
      if let v = _storage._typicalDay, !v.isInitialized {return false}
      if let v = _storage._sleepGoal, !v.isInitialized {return false}
      if let v = _storage._lastModified, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._birthday) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._gender) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._weight) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._height) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._maximumHeartrate) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._restingHeartrate) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._vo2Max) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._trainingBackground) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._typicalDay) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._sleepGoal) }()
        case 100: try { try decoder.decodeSingularMessageField(value: &_storage._lastModified) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._birthday {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._gender {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._weight {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._height {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._maximumHeartrate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._restingHeartrate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._vo2Max {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._trainingBackground {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._typicalDay {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._sleepGoal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._lastModified {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserPhysData, rhs: Data_PbUserPhysData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._birthday != rhs_storage._birthday {return false}
        if _storage._gender != rhs_storage._gender {return false}
        if _storage._weight != rhs_storage._weight {return false}
        if _storage._height != rhs_storage._height {return false}
        if _storage._maximumHeartrate != rhs_storage._maximumHeartrate {return false}
        if _storage._restingHeartrate != rhs_storage._restingHeartrate {return false}
        if _storage._vo2Max != rhs_storage._vo2Max {return false}
        if _storage._trainingBackground != rhs_storage._trainingBackground {return false}
        if _storage._typicalDay != rhs_storage._typicalDay {return false}
        if _storage._sleepGoal != rhs_storage._sleepGoal {return false}
        if _storage._lastModified != rhs_storage._lastModified {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
