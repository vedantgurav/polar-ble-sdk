// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ppi_samples.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///
///PP interval samples
///- PP interval: time period between two optical heart rate pulses
///- Every detected PP interval is linked with an error estimate and status values
///
///
///PP intervals and PP interval error estimates are coded to message using a delta coding.
///
///PP interval and error estimate at point x in the message can be calculated as follows
///---------------------------------------------------------------------------------------
///PP_interval[x] = SUM(ppi_delta(n), where n = 0..x)
///
///Error_estimate_interval[x] = SUM(ppi_error_estimate_delta(n), where n = 0..x)
///
///where
///x: data index
///
///In addition to the delta coded intervals and error estimates the message contains also a PP interval status.
struct Data_PbPpIntervalSamples: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Delta coded PP interval values relative to previous PP interval value
  var ppiDelta: [Int32] = []

  /// Delta coded error estimate values relative to previous error estimate value
  var ppiErrorEstimateDelta: [Int32] = []

  /// PP interval status
  ///
  /// This field indicates a status of the detected PP interval
  /// Following status values are defined
  ///   . Skin contact status (ON / OFF)
  ///   . Presence of movement status
  ///   . Offline status
  ///     - This can be utilized in, for example, in exercise_samples to inform that PP interval sensor
  ///       has been offline similarly as it has been done with RR and other samples
  ///
  /// Status values are coded to status-field as follows:
  ///  - Bit 0 (LSB), skin contact:
  ///    . 0 -- skin contact not detected
  ///    . 1 -- skin contact detected
  ///  - Bit 1, presence of movement:
  ///    . 0 -- moving not detected
  ///    . 1 -- moving detected
  ///  - Bit 2, offline:
  ///    . 0 -- interval is online
  ///    . 1 -- interval denotes an offline period
  var status: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "data"

extension Data_PbPpIntervalSamples: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbPpIntervalSamples"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ppi_delta"),
    2: .standard(proto: "ppi_error_estimate_delta"),
    3: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedSInt32Field(value: &self.ppiDelta) }()
      case 2: try { try decoder.decodeRepeatedSInt32Field(value: &self.ppiErrorEstimateDelta) }()
      case 3: try { try decoder.decodeRepeatedUInt32Field(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ppiDelta.isEmpty {
      try visitor.visitPackedSInt32Field(value: self.ppiDelta, fieldNumber: 1)
    }
    if !self.ppiErrorEstimateDelta.isEmpty {
      try visitor.visitPackedSInt32Field(value: self.ppiErrorEstimateDelta, fieldNumber: 2)
    }
    if !self.status.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.status, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbPpIntervalSamples, rhs: Data_PbPpIntervalSamples) -> Bool {
    if lhs.ppiDelta != rhs.ppiDelta {return false}
    if lhs.ppiErrorEstimateDelta != rhs.ppiErrorEstimateDelta {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
