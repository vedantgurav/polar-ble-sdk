// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: nightly_recovery.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// NR.BPB=PbNightlyRecoveryStatus

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Data_PbNightlyRecoveryStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Date and time of the result was created
  var createdTimestamp: PbSystemDateTime {
    get {return _storage._createdTimestamp ?? PbSystemDateTime()}
    set {_uniqueStorage()._createdTimestamp = newValue}
  }
  /// Returns true if `createdTimestamp` has been explicitly set.
  var hasCreatedTimestamp: Bool {return _storage._createdTimestamp != nil}
  /// Clears the value of `createdTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearCreatedTimestamp() {_uniqueStorage()._createdTimestamp = nil}

  /// Date and time when the file was last modified
  var modifiedTimestamp: PbSystemDateTime {
    get {return _storage._modifiedTimestamp ?? PbSystemDateTime()}
    set {_uniqueStorage()._modifiedTimestamp = newValue}
  }
  /// Returns true if `modifiedTimestamp` has been explicitly set.
  var hasModifiedTimestamp: Bool {return _storage._modifiedTimestamp != nil}
  /// Clears the value of `modifiedTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearModifiedTimestamp() {_uniqueStorage()._modifiedTimestamp = nil}

  /// The limit of ansStatus is from -15.7068 to 15.7068. A value over 0 is representing
  /// higher parasymphatetic activity than usually (and lower symphatetic) and value below 0
  /// is representing lower parasymphatetic activity than usually (and higher symphatetic)
  var ansStatus: Float {
    get {return _storage._ansStatus ?? 0}
    set {_uniqueStorage()._ansStatus = newValue}
  }
  /// Returns true if `ansStatus` has been explicitly set.
  var hasAnsStatus: Bool {return _storage._ansStatus != nil}
  /// Clears the value of `ansStatus`. Subsequent reads from it will return its default value.
  mutating func clearAnsStatus() {_uniqueStorage()._ansStatus = nil}

  /// The combination of normalized ANS status and normalized Sleep Score and Sleep Metric. Between 1 to 6.
  var recoveryIndicator: Int32 {
    get {return _storage._recoveryIndicator ?? 0}
    set {_uniqueStorage()._recoveryIndicator = newValue}
  }
  /// Returns true if `recoveryIndicator` has been explicitly set.
  var hasRecoveryIndicator: Bool {return _storage._recoveryIndicator != nil}
  /// Clears the value of `recoveryIndicator`. Subsequent reads from it will return its default value.
  mutating func clearRecoveryIndicator() {_uniqueStorage()._recoveryIndicator = nil}

  /// This is a number between 0-100 and it indicates in more detail what is the level of combination of ANS
  /// and Sleep inside the recoveryIndicator class. I.e. if your recovery_indicator is 2, than
  /// recovery_indicator_sub_level 0 indicates that you are at the bottom of that class and ~100
  /// indicates that you are at almost recovery_indicator level 3.
  var recoveryIndicatorSubLevel: Int32 {
    get {return _storage._recoveryIndicatorSubLevel ?? 0}
    set {_uniqueStorage()._recoveryIndicatorSubLevel = newValue}
  }
  /// Returns true if `recoveryIndicatorSubLevel` has been explicitly set.
  var hasRecoveryIndicatorSubLevel: Bool {return _storage._recoveryIndicatorSubLevel != nil}
  /// Clears the value of `recoveryIndicatorSubLevel`. Subsequent reads from it will return its default value.
  mutating func clearRecoveryIndicatorSubLevel() {_uniqueStorage()._recoveryIndicatorSubLevel = nil}

  /// Rating of ans status in scale 1-5 compared to own usual level. (5 = best, 1 = worst)
  var ansRate: Int32 {
    get {return _storage._ansRate ?? 0}
    set {_uniqueStorage()._ansRate = newValue}
  }
  /// Returns true if `ansRate` has been explicitly set.
  var hasAnsRate: Bool {return _storage._ansRate != nil}
  /// Clears the value of `ansRate`. Subsequent reads from it will return its default value.
  mutating func clearAnsRate() {_uniqueStorage()._ansRate = nil}

  /// Rating of sleep score status in scale 1-5 compared to own usual level (5 = best, 1 = worst)
  var scoreRateObsolete: Int32 {
    get {return _storage._scoreRateObsolete ?? 0}
    set {_uniqueStorage()._scoreRateObsolete = newValue}
  }
  /// Returns true if `scoreRateObsolete` has been explicitly set.
  var hasScoreRateObsolete: Bool {return _storage._scoreRateObsolete != nil}
  /// Clears the value of `scoreRateObsolete`. Subsequent reads from it will return its default value.
  mutating func clearScoreRateObsolete() {_uniqueStorage()._scoreRateObsolete = nil}

  /// Mean of the HR (after 0.5h from sleep start to 4,5h after sleep start hr) samples to beat interval time. (ms)
  var meanNightlyRecoveryRri: Int32 {
    get {return _storage._meanNightlyRecoveryRri ?? 0}
    set {_uniqueStorage()._meanNightlyRecoveryRri = newValue}
  }
  /// Returns true if `meanNightlyRecoveryRri` has been explicitly set.
  var hasMeanNightlyRecoveryRri: Bool {return _storage._meanNightlyRecoveryRri != nil}
  /// Clears the value of `meanNightlyRecoveryRri`. Subsequent reads from it will return its default value.
  mutating func clearMeanNightlyRecoveryRri() {_uniqueStorage()._meanNightlyRecoveryRri = nil}

  /// Mean of the PPI (after 0.5h from sleep start to 4,5h after sleep start PPI) calculated RMSSD values. (ms)
  var meanNightlyRecoveryRmssd: Int32 {
    get {return _storage._meanNightlyRecoveryRmssd ?? 0}
    set {_uniqueStorage()._meanNightlyRecoveryRmssd = newValue}
  }
  /// Returns true if `meanNightlyRecoveryRmssd` has been explicitly set.
  var hasMeanNightlyRecoveryRmssd: Bool {return _storage._meanNightlyRecoveryRmssd != nil}
  /// Clears the value of `meanNightlyRecoveryRmssd`. Subsequent reads from it will return its default value.
  mutating func clearMeanNightlyRecoveryRmssd() {_uniqueStorage()._meanNightlyRecoveryRmssd = nil}

  /// Mean of the respiration interval (after 0.5h from sleep start to 4,5h after sleep start) samples. (ms)
  var meanNightlyRecoveryRespirationInterval: Int32 {
    get {return _storage._meanNightlyRecoveryRespirationInterval ?? 0}
    set {_uniqueStorage()._meanNightlyRecoveryRespirationInterval = newValue}
  }
  /// Returns true if `meanNightlyRecoveryRespirationInterval` has been explicitly set.
  var hasMeanNightlyRecoveryRespirationInterval: Bool {return _storage._meanNightlyRecoveryRespirationInterval != nil}
  /// Clears the value of `meanNightlyRecoveryRespirationInterval`. Subsequent reads from it will return its default value.
  mutating func clearMeanNightlyRecoveryRespirationInterval() {_uniqueStorage()._meanNightlyRecoveryRespirationInterval = nil}

  /// The mean RRI from the baseline calculation. (ms)
  var meanBaselineRri: Int32 {
    get {return _storage._meanBaselineRri ?? 0}
    set {_uniqueStorage()._meanBaselineRri = newValue}
  }
  /// Returns true if `meanBaselineRri` has been explicitly set.
  var hasMeanBaselineRri: Bool {return _storage._meanBaselineRri != nil}
  /// Clears the value of `meanBaselineRri`. Subsequent reads from it will return its default value.
  mutating func clearMeanBaselineRri() {_uniqueStorage()._meanBaselineRri = nil}

  /// The standard deviation of RRI from baseline calculation.
  var sdBaselineRri: Int32 {
    get {return _storage._sdBaselineRri ?? 0}
    set {_uniqueStorage()._sdBaselineRri = newValue}
  }
  /// Returns true if `sdBaselineRri` has been explicitly set.
  var hasSdBaselineRri: Bool {return _storage._sdBaselineRri != nil}
  /// Clears the value of `sdBaselineRri`. Subsequent reads from it will return its default value.
  mutating func clearSdBaselineRri() {_uniqueStorage()._sdBaselineRri = nil}

  /// The mean RMSSD from the baseline calculation.
  var meanBaselineRmssd: Int32 {
    get {return _storage._meanBaselineRmssd ?? 0}
    set {_uniqueStorage()._meanBaselineRmssd = newValue}
  }
  /// Returns true if `meanBaselineRmssd` has been explicitly set.
  var hasMeanBaselineRmssd: Bool {return _storage._meanBaselineRmssd != nil}
  /// Clears the value of `meanBaselineRmssd`. Subsequent reads from it will return its default value.
  mutating func clearMeanBaselineRmssd() {_uniqueStorage()._meanBaselineRmssd = nil}

  /// The standard deviation of RMSSD from baseline calculation.
  var sdBaselineRmssd: Int32 {
    get {return _storage._sdBaselineRmssd ?? 0}
    set {_uniqueStorage()._sdBaselineRmssd = newValue}
  }
  /// Returns true if `sdBaselineRmssd` has been explicitly set.
  var hasSdBaselineRmssd: Bool {return _storage._sdBaselineRmssd != nil}
  /// Clears the value of `sdBaselineRmssd`. Subsequent reads from it will return its default value.
  mutating func clearSdBaselineRmssd() {_uniqueStorage()._sdBaselineRmssd = nil}

  /// mean Respiration Interval from the baseline calculation. (ms)
  var meanBaselineRespirationInterval: Int32 {
    get {return _storage._meanBaselineRespirationInterval ?? 0}
    set {_uniqueStorage()._meanBaselineRespirationInterval = newValue}
  }
  /// Returns true if `meanBaselineRespirationInterval` has been explicitly set.
  var hasMeanBaselineRespirationInterval: Bool {return _storage._meanBaselineRespirationInterval != nil}
  /// Clears the value of `meanBaselineRespirationInterval`. Subsequent reads from it will return its default value.
  mutating func clearMeanBaselineRespirationInterval() {_uniqueStorage()._meanBaselineRespirationInterval = nil}

  /// The standard deviation of Respiration Interval from baseline calculation.
  var sdBaselineRespirationInterval: Int32 {
    get {return _storage._sdBaselineRespirationInterval ?? 0}
    set {_uniqueStorage()._sdBaselineRespirationInterval = newValue}
  }
  /// Returns true if `sdBaselineRespirationInterval` has been explicitly set.
  var hasSdBaselineRespirationInterval: Bool {return _storage._sdBaselineRespirationInterval != nil}
  /// Clears the value of `sdBaselineRespirationInterval`. Subsequent reads from it will return its default value.
  mutating func clearSdBaselineRespirationInterval() {_uniqueStorage()._sdBaselineRespirationInterval = nil}

  /// Chosen sleep tip for the user.
  var sleepTip: String {
    get {return _storage._sleepTip ?? String()}
    set {_uniqueStorage()._sleepTip = newValue}
  }
  /// Returns true if `sleepTip` has been explicitly set.
  var hasSleepTip: Bool {return _storage._sleepTip != nil}
  /// Clears the value of `sleepTip`. Subsequent reads from it will return its default value.
  mutating func clearSleepTip() {_uniqueStorage()._sleepTip = nil}

  /// Chosen vitality tip for the user.
  var vitalityTip: String {
    get {return _storage._vitalityTip ?? String()}
    set {_uniqueStorage()._vitalityTip = newValue}
  }
  /// Returns true if `vitalityTip` has been explicitly set.
  var hasVitalityTip: Bool {return _storage._vitalityTip != nil}
  /// Clears the value of `vitalityTip`. Subsequent reads from it will return its default value.
  mutating func clearVitalityTip() {_uniqueStorage()._vitalityTip = nil}

  /// Chosen exercise tip for the user.
  var exerciseTip: String {
    get {return _storage._exerciseTip ?? String()}
    set {_uniqueStorage()._exerciseTip = newValue}
  }
  /// Returns true if `exerciseTip` has been explicitly set.
  var hasExerciseTip: Bool {return _storage._exerciseTip != nil}
  /// Clears the value of `exerciseTip`. Subsequent reads from it will return its default value.
  mutating func clearExerciseTip() {_uniqueStorage()._exerciseTip = nil}

  /// Date for which the sleep result and nightly recovery result is for
  var sleepResultDate: PbDate {
    get {return _storage._sleepResultDate ?? PbDate()}
    set {_uniqueStorage()._sleepResultDate = newValue}
  }
  /// Returns true if `sleepResultDate` has been explicitly set.
  var hasSleepResultDate: Bool {return _storage._sleepResultDate != nil}
  /// Clears the value of `sleepResultDate`. Subsequent reads from it will return its default value.
  mutating func clearSleepResultDate() {_uniqueStorage()._sleepResultDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Data_PbNightlyRecoveryStatus: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "data"

extension Data_PbNightlyRecoveryStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbNightlyRecoveryStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "created_timestamp"),
    2: .standard(proto: "modified_timestamp"),
    3: .standard(proto: "ans_status"),
    4: .standard(proto: "recovery_indicator"),
    5: .standard(proto: "recovery_indicator_sub_level"),
    6: .standard(proto: "ans_rate"),
    7: .standard(proto: "score_rate_OBSOLETE"),
    8: .standard(proto: "mean_nightly_recovery_RRI"),
    9: .standard(proto: "mean_nightly_recovery_RMSSD"),
    10: .standard(proto: "mean_nightly_recovery_respiration_interval"),
    11: .standard(proto: "mean_baseline_RRI"),
    12: .standard(proto: "sd_baseline_RRI"),
    13: .standard(proto: "mean_baseline_RMSSD"),
    14: .standard(proto: "sd_baseline_RMSSD"),
    15: .standard(proto: "mean_baseline_respiration_interval"),
    16: .standard(proto: "sd_baseline_respiration_interval"),
    17: .standard(proto: "sleep_tip"),
    18: .standard(proto: "vitality_tip"),
    19: .standard(proto: "exercise_tip"),
    20: .standard(proto: "sleep_result_date"),
  ]

  fileprivate class _StorageClass {
    var _createdTimestamp: PbSystemDateTime? = nil
    var _modifiedTimestamp: PbSystemDateTime? = nil
    var _ansStatus: Float? = nil
    var _recoveryIndicator: Int32? = nil
    var _recoveryIndicatorSubLevel: Int32? = nil
    var _ansRate: Int32? = nil
    var _scoreRateObsolete: Int32? = nil
    var _meanNightlyRecoveryRri: Int32? = nil
    var _meanNightlyRecoveryRmssd: Int32? = nil
    var _meanNightlyRecoveryRespirationInterval: Int32? = nil
    var _meanBaselineRri: Int32? = nil
    var _sdBaselineRri: Int32? = nil
    var _meanBaselineRmssd: Int32? = nil
    var _sdBaselineRmssd: Int32? = nil
    var _meanBaselineRespirationInterval: Int32? = nil
    var _sdBaselineRespirationInterval: Int32? = nil
    var _sleepTip: String? = nil
    var _vitalityTip: String? = nil
    var _exerciseTip: String? = nil
    var _sleepResultDate: PbDate? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _createdTimestamp = source._createdTimestamp
      _modifiedTimestamp = source._modifiedTimestamp
      _ansStatus = source._ansStatus
      _recoveryIndicator = source._recoveryIndicator
      _recoveryIndicatorSubLevel = source._recoveryIndicatorSubLevel
      _ansRate = source._ansRate
      _scoreRateObsolete = source._scoreRateObsolete
      _meanNightlyRecoveryRri = source._meanNightlyRecoveryRri
      _meanNightlyRecoveryRmssd = source._meanNightlyRecoveryRmssd
      _meanNightlyRecoveryRespirationInterval = source._meanNightlyRecoveryRespirationInterval
      _meanBaselineRri = source._meanBaselineRri
      _sdBaselineRri = source._sdBaselineRri
      _meanBaselineRmssd = source._meanBaselineRmssd
      _sdBaselineRmssd = source._sdBaselineRmssd
      _meanBaselineRespirationInterval = source._meanBaselineRespirationInterval
      _sdBaselineRespirationInterval = source._sdBaselineRespirationInterval
      _sleepTip = source._sleepTip
      _vitalityTip = source._vitalityTip
      _exerciseTip = source._exerciseTip
      _sleepResultDate = source._sleepResultDate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._createdTimestamp == nil {return false}
      if let v = _storage._createdTimestamp, !v.isInitialized {return false}
      if let v = _storage._modifiedTimestamp, !v.isInitialized {return false}
      if let v = _storage._sleepResultDate, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._createdTimestamp) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._modifiedTimestamp) }()
        case 3: try { try decoder.decodeSingularFloatField(value: &_storage._ansStatus) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._recoveryIndicator) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._recoveryIndicatorSubLevel) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._ansRate) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._scoreRateObsolete) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._meanNightlyRecoveryRri) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._meanNightlyRecoveryRmssd) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._meanNightlyRecoveryRespirationInterval) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._meanBaselineRri) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._sdBaselineRri) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._meanBaselineRmssd) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._sdBaselineRmssd) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._meanBaselineRespirationInterval) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._sdBaselineRespirationInterval) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._sleepTip) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._vitalityTip) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._exerciseTip) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._sleepResultDate) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._createdTimestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._modifiedTimestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._ansStatus {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._recoveryIndicator {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._recoveryIndicatorSubLevel {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._ansRate {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._scoreRateObsolete {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._meanNightlyRecoveryRri {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._meanNightlyRecoveryRmssd {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._meanNightlyRecoveryRespirationInterval {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._meanBaselineRri {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._sdBaselineRri {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._meanBaselineRmssd {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._sdBaselineRmssd {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._meanBaselineRespirationInterval {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._sdBaselineRespirationInterval {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._sleepTip {
        try visitor.visitSingularStringField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._vitalityTip {
        try visitor.visitSingularStringField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._exerciseTip {
        try visitor.visitSingularStringField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._sleepResultDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbNightlyRecoveryStatus, rhs: Data_PbNightlyRecoveryStatus) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._createdTimestamp != rhs_storage._createdTimestamp {return false}
        if _storage._modifiedTimestamp != rhs_storage._modifiedTimestamp {return false}
        if _storage._ansStatus != rhs_storage._ansStatus {return false}
        if _storage._recoveryIndicator != rhs_storage._recoveryIndicator {return false}
        if _storage._recoveryIndicatorSubLevel != rhs_storage._recoveryIndicatorSubLevel {return false}
        if _storage._ansRate != rhs_storage._ansRate {return false}
        if _storage._scoreRateObsolete != rhs_storage._scoreRateObsolete {return false}
        if _storage._meanNightlyRecoveryRri != rhs_storage._meanNightlyRecoveryRri {return false}
        if _storage._meanNightlyRecoveryRmssd != rhs_storage._meanNightlyRecoveryRmssd {return false}
        if _storage._meanNightlyRecoveryRespirationInterval != rhs_storage._meanNightlyRecoveryRespirationInterval {return false}
        if _storage._meanBaselineRri != rhs_storage._meanBaselineRri {return false}
        if _storage._sdBaselineRri != rhs_storage._sdBaselineRri {return false}
        if _storage._meanBaselineRmssd != rhs_storage._meanBaselineRmssd {return false}
        if _storage._sdBaselineRmssd != rhs_storage._sdBaselineRmssd {return false}
        if _storage._meanBaselineRespirationInterval != rhs_storage._meanBaselineRespirationInterval {return false}
        if _storage._sdBaselineRespirationInterval != rhs_storage._sdBaselineRespirationInterval {return false}
        if _storage._sleepTip != rhs_storage._sleepTip {return false}
        if _storage._vitalityTip != rhs_storage._vitalityTip {return false}
        if _storage._exerciseTip != rhs_storage._exerciseTip {return false}
        if _storage._sleepResultDate != rhs_storage._sleepResultDate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
